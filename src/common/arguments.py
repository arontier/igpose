from argparse import ArgumentParser

def get_common_train_args(parser: ArgumentParser):
    parser.add_argument("--desc", type=str)
    parser.add_argument("--backend", default="dgl", help="dgl|pyg")
    parser.add_argument("--cuda", type=int, default=0)
    parser.add_argument("--folderpath", default="")
    parser.add_argument("--datapath", default="../data/abg_syn_1280")
    parser.add_argument("--foldpath", default="")
    parser.add_argument("--pretrained_ckpt", default="")
    parser.add_argument("--ckptpath", default="")
    parser.add_argument("--lr", type=float, default=0.001)
    parser.add_argument("--batch_size", type=int, default=8)
    parser.add_argument("--num_epochs", type=int, default=100)
    parser.add_argument("--patience", type=int, default=20)
    parser.add_argument("--log_dir", type=str, default="../logs")
    parser.add_argument("--model_name", type=str, default="best_model")
    parser.add_argument("--embed_size", type=int, default=1280)
    parser.add_argument("--input_size", type=int, default=128)
    parser.add_argument("--hidden_size", type=int, default=128)
    parser.add_argument("--output_size", type=int, default=1)
    parser.add_argument("--edge_size", type=int, default=40)
    parser.add_argument("--num_layers", type=int, default=3)
    parser.add_argument("--dropout", type=float, default=0.1)
    parser.add_argument("--pooling", type=str, default="weighted|afp")
    parser.add_argument("--use_ef", action="store_true", default=False)
    parser.add_argument("--edge_fn", type=str, default="gate", help="egat|gate")
    parser.add_argument("--agg_fn", type=str, default="gru", help="aggregation function for node [none, gru]")
    parser.add_argument("--agg_mode", type=str, default="double", help="single: only use current conv output as gru input, double [h_conv, h_prev]")
    parser.add_argument("--conv_fn", type=str, default="gat", help="gat|gt|gcn|gin|egnn|etgnn")
    parser.add_argument("--pred_loss", type=str, default="mse", help="mse for regression, ce for classification")
    parser.add_argument("--activation", type=str, default="relu", help="relu|elu")
    parser.add_argument("--sampling_ratio", type=int, default=0.8)
    parser.add_argument("--load_embed", action="store_true", help="by default: node features are pre-generated, otherwise have to be generated at runtime")
    parser.add_argument("--best_val", type=float, default=0.)
    parser.add_argument("--sample_type", type=str, default="balanced", help="balanced|inverse")
    parser.add_argument("--khop", type=int, default=-1)
    parser.add_argument("--node_threshold", type=int, default=-1, help="select up to this #nodes")
    parser.add_argument("--rc_node_threshold", type=int, default=450, help="node threshold for rcsb chai1")
    parser.add_argument("--sampling_method", type=str, default='k_iter')
    parser.add_argument("--cdr", action="store_true", default=False, help="sampling from cdr, the metadata must contain H_CDR & L_CDR")
    parser.add_argument("--class_ratio", type=str, default="", help="Manually set weights for class sampling e.g [0.8,0.2]")
    parser.add_argument("--sep", type=str, default="", help="v1, v2 that treats each graph independently")
    parser.add_argument("--grad_scale", action="store_true", default=False)
    parser.add_argument("--pred_fn", type=str, default="f1", help="f1|tpr")
    parser.add_argument("--meta_sampler", action="store_true", default=False)
    parser.add_argument("--mask_embed", action="store_true", default=False, help="only generate embeddings for nodes near binding site")
    parser.add_argument("--embed_model", default="esm2_t6_8M_UR50D", help="https://github.com/facebookresearch/esm")
    parser.add_argument("--repr_layer", help="representation layer", default=6, type=int)
    parser.add_argument("--augmentation", action="store_true", default=False, help="rotate graph coordinates randomly in training")
    parser.add_argument("--layer_norm", action="store_true", default=False, help="Stabilize output of node hiddens")
    parser.add_argument("--force_eval", action="store_true", default=False, help="Evaluate every epochs")
    parser.add_argument("--residual", action="store_true", default=False, help="for fast egnn")
    parser.add_argument("--temp", type=float, default=1)
    parser.add_argument("--num_pred_layer", type=int, default=2)
    parser.add_argument("--reset_layers", type=str, default="")

def get_syntheic_args(parser: ArgumentParser):
    parser.add_argument("--filepath", default="/Arontier_1/Projects/AbAg_decoy/dataset/split/dockq_ab_c60_pos_50K.csv")
    parser.add_argument("--embed_path", default="../data/abg_syn_320")
    parser.add_argument("--pre_fetch", action="store_true", default=False, help="prefetching dataset when #graphs is small")
    parser.add_argument("--bins", type=int, default=10, help="Convert regression labels to bins")
    parser.add_argument("--cls_factor", type=float, default=1., help="Constraint the graph level by classification")
    parser.add_argument("--mdn_factor", type=float, default=0., help="Mdn scores at binding site should be correlated with prob scores")
    parser.add_argument("--node_factor", type=float, default=0., help="Constraint the node level by classification")
    parser.add_argument("--coeff_factor", type=float, default=0., help="Probability must be correlated with other scores")
    parser.add_argument("--prob_factor", type=float, default=0., help="Probability should be around 0.5")
    parser.add_argument("--conf_factor", type=float, default=0., help="Penalize when prob is too close to either 1 or 0")
    parser.add_argument("--rank_factor", type=float, default=0., help="If data contains numerical numbers ~ ranking like DockQ")
    parser.add_argument("--xai_factor", type=float, default=0., help="Enable intrepretable feature")
    parser.add_argument("--mdn_cls", type=str, default="False", help="using mdn scores as the prediction scores instead of using node pooling")
    parser.add_argument("--node_onehot", action="store_true")
    parser.add_argument("--cdr_onehot", action="store_true", default=False, help="Add cdr information to node feat")
    parser.add_argument("--di_angle", action="store_true")
    parser.add_argument("--edge_onehot", action="store_true")
    parser.add_argument("--meta_model", action="store_true")
    parser.add_argument("--timestamps")
    parser.add_argument("--sep_embed", action="store_true", help="preload embed or load embed file")
    parser.add_argument("--atom", action="store_true", default=False)
    parser.add_argument("--binding_site", action="store_true", default=False, help="when graph is full ab,ig,ag but want to keep only edges at binding site of ag")
    parser.add_argument("--label_threshold", type=float, default=0.8, help="Cut off threshold for label data positive vs negative class")
    parser.add_argument("--label_clamp", type=str, default='', help="remove all samples in this threshold")
    parser.add_argument("--label_norm", type=str, default='stdlog10', help="Apply normalization method to regression labels")
    parser.add_argument("--train_dataset", type=str, default="", help="If not specified, all will be used (separate by ,)")
    parser.add_argument("--test_dataset", type=str, default="", help="If not specified, all will be used (separate by ,)")
    parser.add_argument("--val_dataset", type=str, default="", help="If not specified, all will be used (separate by ,)")
    parser.add_argument("--edge_distance_threshold", type=float, default=0., help="Edge pruning by distance threshold")

def get_distributed_args(parser: ArgumentParser):
    parser.add_argument("--distributed", action="store_true", default=False)
    parser.add_argument("--init_method", type=str, default="env://")

def get_lora_args(parser: ArgumentParser):
    parser.add_argument("--lora", action="store_true", default=False)
    parser.add_argument("--lora_rank", type=int, default=16)
    parser.add_argument("--lora_alpha", type=int, default=64)
    parser.add_argument("--lora_dropout", type=float, default=0.2)
    